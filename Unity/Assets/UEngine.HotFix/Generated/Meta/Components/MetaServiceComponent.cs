//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaContext {

    public MetaEntity serviceEntity { get { return GetGroup(MetaMatcher.Service).GetSingleEntity(); } }
    public ServiceComponent service { get { return serviceEntity.service; } }
    public bool hasService { get { return serviceEntity != null; } }

    public MetaEntity SetService(System.Collections.Generic.Dictionary<System.Type, IService> newRegisterServices) {
        if (hasService) {
            throw new Entitas.EntitasException("Could not set Service!\n" + this + " already has an entity with ServiceComponent!",
                "You should check if the context already has a serviceEntity before setting it or use context.ReplaceService().");
        }
        var entity = CreateEntity();
        entity.AddService(newRegisterServices);
        return entity;
    }

    public void ReplaceService(System.Collections.Generic.Dictionary<System.Type, IService> newRegisterServices) {
        var entity = serviceEntity;
        if (entity == null) {
            entity = SetService(newRegisterServices);
        } else {
            entity.ReplaceService(newRegisterServices);
        }
    }

    public void RemoveService() {
        serviceEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity {

    public ServiceComponent service { get { return (ServiceComponent)GetComponent(MetaComponentsLookup.Service); } }
    public bool hasService { get { return HasComponent(MetaComponentsLookup.Service); } }

    public void AddService(System.Collections.Generic.Dictionary<System.Type, IService> newRegisterServices) {
        var index = MetaComponentsLookup.Service;
        var component = (ServiceComponent)CreateComponent(index, typeof(ServiceComponent));
        component.RegisterServices = newRegisterServices;
        AddComponent(index, component);
    }

    public void ReplaceService(System.Collections.Generic.Dictionary<System.Type, IService> newRegisterServices) {
        var index = MetaComponentsLookup.Service;
        var component = (ServiceComponent)CreateComponent(index, typeof(ServiceComponent));
        component.RegisterServices = newRegisterServices;
        ReplaceComponent(index, component);
    }

    public void RemoveService() {
        RemoveComponent(MetaComponentsLookup.Service);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MetaMatcher {

    static Entitas.IMatcher<MetaEntity> _matcherService;

    public static Entitas.IMatcher<MetaEntity> Service {
        get {
            if (_matcherService == null) {
                var matcher = (Entitas.Matcher<MetaEntity>)Entitas.Matcher<MetaEntity>.AllOf(MetaComponentsLookup.Service);
                matcher.componentNames = MetaComponentsLookup.componentNames;
                _matcherService = matcher;
            }

            return _matcherService;
        }
    }
}
