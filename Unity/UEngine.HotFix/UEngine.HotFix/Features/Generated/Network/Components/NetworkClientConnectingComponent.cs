//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;

public partial class NetworkContext {

    public NetworkEntity clientConnectingEntity { get { return GetGroup(NetworkMatcher.ClientConnecting).GetSingleEntity(); } }
    public UEngine.Net.ClientConnectingComponent clientConnecting { get { return clientConnectingEntity.clientConnecting; } }
    public bool hasClientConnecting { get { return clientConnectingEntity != null; } }

    public NetworkEntity SetClientConnecting(string newIP, int newPort) {
        if (hasClientConnecting) {
            throw new Entitas.EntitasException("Could not set ClientConnecting!\n" + this + " already has an entity with UEngine.Net.ClientConnectingComponent!",
                "You should check if the context already has a clientConnectingEntity before setting it or use context.ReplaceClientConnecting().");
        }
        var entity = CreateEntity();
        entity.AddClientConnecting(newIP, newPort);
        return entity;
    }

    public void ReplaceClientConnecting(string newIP, int newPort) {
        var entity = clientConnectingEntity;
        if (entity == null) {
            entity = SetClientConnecting(newIP, newPort);
        } else {
            entity.ReplaceClientConnecting(newIP, newPort);
        }
    }

    public void RemoveClientConnecting() {
        clientConnectingEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NetworkEntity {

    public UEngine.Net.ClientConnectingComponent clientConnecting { get { return (UEngine.Net.ClientConnectingComponent)GetComponent(NetworkComponentsLookup.ClientConnecting); } }
    public bool hasClientConnecting { get { return HasComponent(NetworkComponentsLookup.ClientConnecting); } }

    public void AddClientConnecting(string newIP, int newPort) {
        var index = NetworkComponentsLookup.ClientConnecting;
        var component = (UEngine.Net.ClientConnectingComponent)CreateComponent(index, typeof(UEngine.Net.ClientConnectingComponent));
        component.IP = newIP;
        component.Port = newPort;
        AddComponent(index, component);
    }

    public void ReplaceClientConnecting(string newIP, int newPort) {
        var index = NetworkComponentsLookup.ClientConnecting;
        var component = (UEngine.Net.ClientConnectingComponent)CreateComponent(index, typeof(UEngine.Net.ClientConnectingComponent));
        component.IP = newIP;
        component.Port = newPort;
        ReplaceComponent(index, component);
    }

    public void RemoveClientConnecting() {
        Debug.LogError($"RemoveClientConnecting: {NetworkComponentsLookup.ClientConnecting}");
        RemoveComponent(NetworkComponentsLookup.ClientConnecting);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NetworkMatcher {

    static Entitas.IMatcher<NetworkEntity> _matcherClientConnecting;

    public static Entitas.IMatcher<NetworkEntity> ClientConnecting {
        get {
            if (_matcherClientConnecting == null) {
                var matcher = (Entitas.Matcher<NetworkEntity>)Entitas.Matcher<NetworkEntity>.AllOf(NetworkComponentsLookup.ClientConnecting);
                matcher.componentNames = NetworkComponentsLookup.componentNames;
                _matcherClientConnecting = matcher;
            }

            return _matcherClientConnecting;
        }
    }
}
